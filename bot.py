import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramNetworkError
from dotenv import load_dotenv
from typing import Optional, List

from windsurf_controller import desktop_controller
from mac_window_manager import MacWindowManager
from ai_processor import ai_processor
import asyncio as _asyncio
from asyncio.subprocess import PIPE as _PIPE
import html

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ taskkill /f /im python.exe; Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd 'z:\Dev\vibe\vibe_coding'; python bot.py"

load_dotenv()


async def answer_chunks(message: types.Message, text: str, parse_mode: Optional[str] = None, reply_markup: Optional[ReplyKeyboardMarkup] = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤).
    –°—Ç–∞–≤–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ —á–∞—Ç–µ.
    """
    if text is None:
        return
    max_len = 4096
    remaining = text
    first = True
    while remaining:
        if len(remaining) <= max_len:
            chunk = remaining
            remaining = ""
        else:
            # —Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∑–∞—Ç—å –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ç—Ä–æ–∫–∏
            split_at = remaining.rfind("\n", 0, max_len)
            if split_at == -1:
                split_at = max_len
            chunk = remaining[:split_at]
            remaining = remaining[split_at:]
        # –ü–∞—Ä—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–ª—É—á–∞–π –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        attempts = 0
        while True:
            try:
                await message.answer(chunk, parse_mode=parse_mode, reply_markup=(reply_markup if first else None))
                break
            except TelegramNetworkError as e:
                attempts += 1
                if attempts <= 2:
                    logger.warning(f"answer_chunks retry {attempts} after TelegramNetworkError: {e}")
                    try:
                        await asyncio.sleep(0.7)
                    except Exception:
                        pass
                    continue
                logger.warning(f"answer_chunks give up after {attempts} attempts: {e}")
                return
        first = False



import logging
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –ø–æ .env: LOG_LEVEL (DEBUG/INFO/WARNING/ERROR)
_lvl_name = os.getenv('LOG_LEVEL', 'WARNING').upper()
_lvl = getattr(logging, _lvl_name, logging.WARNING)
logging.basicConfig(level=_lvl)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–≥–ª—É—à–∞–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger('aiogram').setLevel(logging.WARNING)
logging.getLogger('aiogram.event').setLevel(logging.WARNING)
logging.getLogger('aiohttp').setLevel(logging.WARNING)
logging.getLogger('PIL').setLevel(logging.WARNING)
logging.getLogger('PIL.PngImagePlugin').setLevel(logging.ERROR)

# –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
logging.getLogger('windsurf_controller').setLevel(logging.INFO)
logging.getLogger('mac_window_manager').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)
logger.setLevel(_lvl)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–µ–∑ –±–æ—Ç–∞; –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ main()
dp = Dispatcher()

REMOTE_CONTROLLER_URL = ""

# Git —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö user_id (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
_ids_raw = os.getenv("GIT_ALLOWED_USER_IDS", "")
try:
    GIT_ALLOWED_USER_IDS = {int(x) for x in _ids_raw.replace(" ", "").split(",") if x.strip().isdigit()}
except Exception:
    GIT_ALLOWED_USER_IDS = set()

# –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏ –¥–ª—è git: –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é GIT_WORKDIR; –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
GIT_WORKDIR = (os.getenv("GIT_WORKDIR") or "").strip()
REPO_ROOT = os.path.dirname(os.path.abspath(__file__))

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è git root
# –ü–æ —á–∞—Ç—É (chat_id -> path) ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
CHAT_GIT_ROOT_OVERRIDE: dict[int, str] = {}
# –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (user_id -> path)
GIT_ROOT_OVERRIDE: dict[int, str] = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = (
    {}
)  # –§–æ—Ä–º–∞—Ç: {user_id: {'last_full_response': str, 'last_updated': datetime}}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        # [
        #     KeyboardButton(text="/calibrate_input"),
        #     KeyboardButton(text="/calibrate_button"),
        # ],
        # [
        #     KeyboardButton(text="/calibrate_response"),
        #     KeyboardButton(text="/calibrate_confirm"),
        # ],
        [KeyboardButton(text="/status"), KeyboardButton(text="/windows")],
        # [KeyboardButton(text="/full")],
    ],
    resize_keyboard=True,
)


@dp.message(CommandStart())
async def start_command(message: types.Message):
    try:
        await message.answer(
            "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Windsurf Desktop\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/status ‚Äî —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "/model ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é API (list/set/current)\n"
            "/wsmodel set [#N|@sub] <name> ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å –≤ UI Windsurf (Cmd+/ ‚Üí –≤–≤–µ—Å—Ç–∏ ‚Üí Enter)\n"
            "/newchat ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç (–∫–ª–∏–∫ –ø–æ 1192,51)\n"
            "/change <name> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ ~/VovkaNowEngineer/<name> –≤ Windsurf\n"
            "/git ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Git (status/commit/push) ‚Äî –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ user_id\n"
            "/whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram user_id\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Windsurf!",
            reply_markup=main_keyboard,
        )
    except TelegramNetworkError as e:
        logger.warning(f"/start answer failed: {e}")



@dp.message(Command(commands=["status"]))
async def status(message: types.Message):
    diag = desktop_controller.get_diagnostics()
    status_lines = [
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:",
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diag.get('platform')}",
        f"Windsurf –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(diag.get('windsurf_pids', []))} ‚Äî {diag.get('windsurf_pids')}",
        f"Windows automation: {'‚úÖ' if diag.get('windows_automation') else '‚ùå'}",
        f"–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {diag.get('success_sends')}",
        f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {diag.get('failed_sends')}",
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {diag.get('last_error') or '‚Äî'}",
        f"last_paste_strategy: {diag.get('last_paste_strategy') or '‚Äî'}",
        f"last_copy_method: {diag.get('last_copy_method') or '‚Äî'}",
        f"last_copy_length: {diag.get('last_copy_length')}",
        f"last_copy_is_echo: {diag.get('last_copy_is_echo')}",
        f"response_wait_loops: {diag.get('response_wait_loops')}",
        f"response_ready_time: {diag.get('response_ready_time')}s",
        f"response_stabilized: {diag.get('response_stabilized')}",
        f"response_stabilized_by: {diag.get('response_stabilized_by')}",
        f"last_ui_button: {diag.get('last_ui_button')}",
        f"last_ui_avg_color: {diag.get('last_ui_avg_color')}",
        f"last_visual_region: {diag.get('last_visual_region')}",
        f"last_click_xy: {diag.get('last_click_xy')}",
        f"last_ready_pixel: {diag.get('last_ready_pixel')}",
        f"last_model_set: {diag.get('last_model_set')}",
        f"cpu_quiet_seconds: {diag.get('cpu_quiet_seconds')}",
        f"cpu_last_total_percent: {diag.get('cpu_last_total_percent')}",
        "",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        f"RESPONSE_WAIT_SECONDS={diag.get('RESPONSE_WAIT_SECONDS')}",
        f"RESPONSE_MAX_WAIT_SECONDS={diag.get('RESPONSE_MAX_WAIT_SECONDS')}",
        f"RESPONSE_POLL_INTERVAL_SECONDS={diag.get('RESPONSE_POLL_INTERVAL_SECONDS')}",
        f"RESPONSE_STABLE_MIN_SECONDS={diag.get('RESPONSE_STABLE_MIN_SECONDS')}",
        f"PASTE_RETRY_COUNT={diag.get('PASTE_RETRY_COUNT')}",
        f"COPY_RETRY_COUNT={diag.get('COPY_RETRY_COUNT')}",
        f"USE_UI_BUTTON_DETECTION={os.getenv('USE_UI_BUTTON_DETECTION')}",
        f"SEND_BTN_REGION_RIGHT={os.getenv('SEND_BTN_REGION_RIGHT')}",
        f"SEND_BTN_REGION_BOTTOM={os.getenv('SEND_BTN_REGION_BOTTOM')}",
        f"SEND_BTN_REGION_W={os.getenv('SEND_BTN_REGION_W')}",
        f"SEND_BTN_REGION_H={os.getenv('SEND_BTN_REGION_H')}",
        f"SEND_BTN_BLUE_DELTA={os.getenv('SEND_BTN_BLUE_DELTA')}",
        f"SEND_BTN_WHITE_BRIGHT={os.getenv('SEND_BTN_WHITE_BRIGHT')}",
        f"USE_VISUAL_STABILITY={os.getenv('USE_VISUAL_STABILITY')}",
        f"VISUAL_REGION_TOP={os.getenv('VISUAL_REGION_TOP')}",
        f"VISUAL_REGION_BOTTOM={os.getenv('VISUAL_REGION_BOTTOM')}",
        f"VISUAL_SAMPLE_INTERVAL_SECONDS={os.getenv('VISUAL_SAMPLE_INTERVAL_SECONDS')}",
        f"VISUAL_DIFF_THRESHOLD={os.getenv('VISUAL_DIFF_THRESHOLD')}",
        f"VISUAL_STABLE_SECONDS={os.getenv('VISUAL_STABLE_SECONDS')}",
        f"SAVE_VISUAL_DEBUG={os.getenv('SAVE_VISUAL_DEBUG')}",
        f"SAVE_VISUAL_DIR={os.getenv('SAVE_VISUAL_DIR')}",
        f"RIGHT_CLICK_X_FRACTION={os.getenv('RIGHT_CLICK_X_FRACTION')}",
        f"RIGHT_CLICK_Y_OFFSET={os.getenv('RIGHT_CLICK_Y_OFFSET')}",
        f"USE_COPY_SHORT_FALLBACK={os.getenv('USE_COPY_SHORT_FALLBACK')}",
        f"USE_READY_PIXEL={os.getenv('USE_READY_PIXEL')}",
        f"READY_PIXEL_REQUIRED={os.getenv('READY_PIXEL_REQUIRED')}",
        f"READY_PIXEL=(x={os.getenv('READY_PIXEL_X')}, y={os.getenv('READY_PIXEL_Y')}, rgb=({os.getenv('READY_PIXEL_R')},{os.getenv('READY_PIXEL_G')},{os.getenv('READY_PIXEL_B')}), tol={os.getenv('READY_PIXEL_TOL')})",
        f"CLICK_ABS=(x={os.getenv('CLICK_ABS_X')}, y={os.getenv('CLICK_ABS_Y')})",
        "",
        "AI:",
        f"Gemini –º–æ–¥–µ–ª—å: {ai_processor.get_model_name() or '‚Äî'}",
    ]
    await answer_chunks(message, "\n".join(status_lines), reply_markup=main_keyboard)


@dp.message(Command(commands=["windows"]))
async def windows(message: types.Message):
    try:
        uid = getattr(getattr(message, 'from_user', None), 'id', None)
        cid = getattr(getattr(message, 'chat', None), 'id', None)
        logger.info(f"/windows from user={uid} chat={cid}")
    except Exception:
        pass
    titles = desktop_controller.list_windows()
    lines = ["ü™ü –û–∫–Ω–∞ Windsurf:"]
    if titles:
        for i, t in enumerate(titles, start=1):
            lines.append(f"#{i}: {t}")
    else:
        lines.append("(–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–∫–Ω–µ
    lines.append("\n–ê–¥—Ä–µ—Å–∞—Ü–∏—è –æ–∫–Ω–∞:")
    lines.append("[#N] ‚Äî –ø–æ –Ω–æ–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ, [@—á–∞—Å—Ç—å_–∑–∞–≥–æ–ª–æ–≤–∫–∞] ‚Äî –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ")
    lines.append("\n–ü—Ä–∏–º–µ—Ä—ã —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–∫–Ω–µ:")
    if titles:
        # –ü–æ–¥–±–µ—Ä—ë–º –ø–∞—Ä—É –Ω–∞–≥–ª—è–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        ex1_idx = 1
        ex1_model = os.getenv("WSMODEL_EXAMPLE1", "gemini-2.5-pro")
        lines.append(f"‚Ä¢ /wsmodel set [#{ex1_idx}] {ex1_model}")
        # –ü—Ä–∏–º–µ—Ä –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ title
        first_title = titles[0]
        # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é '—Å–ª–æ–≤–æ/–ø–æ–¥—Å—Ç—Ä–æ–∫—É' –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ —É–¥–æ–±–Ω—É—é –º–µ—Ç–∫—É
        import re as _re
        token = _re.sub(r"[^\w\-–ê-–Ø–∞-—è]+", " ", first_title).strip().split()
        sub = token[0] if token else first_title[:10]
        ex2_model = os.getenv("WSMODEL_EXAMPLE2", "gpt-4o")
        lines.append(f"‚Ä¢ /wsmodel set [@{sub}] {ex2_model}")
    else:
        lines.append("‚Ä¢ /wsmodel set [#1] gemini-2.5-pro")
        lines.append("‚Ä¢ /wsmodel set [@vibe_coding] gpt-4o")
    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ
    show_dbg = os.getenv("WINDOWS_SHOW_DEBUG", "0").lower() not in ("0", "false", "no")
    if show_dbg:
        try:
            mm = MacWindowManager()
            t2, dbg = mm.list_window_titles_with_debug()
            if t2 and t2 != titles:
                lines.append("\n(‚ÑπÔ∏è fallback) –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤–∏–¥–∏—Ç:")
                for i, t in enumerate(t2, start=1):
                    lines.append(f"‚Üí {i}: {t}")
            if dbg:
                lines.append("\nDebug (AppleScript):")
                for d in dbg[:12]:
                    lines.append(f"‚Ä¢ {d}")
        except Exception:
            pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ–±—Ä—ã–≤–æ–≤
    try:
        logger.info("/windows reply (first 2000 chars):\n" + "\n".join(lines)[:2000])
    except Exception:
        pass
    await answer_chunks(message, "\n".join(lines), reply_markup=main_keyboard)


@dp.message(Command(commands=["model"]))
async def cmd_model(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é API —á–µ—Ä–µ–∑ Telegram (—á–µ—Ä–µ–∑ ai_processor)
    –ü—Ä–∏–º–µ—Ä—ã:
    /model -> –ø–æ–º–æ—â—å
    /model current
    /model list [filter]
    /model set gemini-2.5-pro
    """
    text = (message.text or "").strip()
    parts = text.split()
    if len(parts) == 1:
        help_text = (
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é API (—á–µ—Ä–µ–∑ ai_processor):\n"
            "‚Ä¢ /model current ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ /model list ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n"
            "‚Ä¢ /model list pro ‚Äî —Å–ø–∏—Å–æ–∫, —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ\n"
            "‚Ä¢ /model set <name> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å\n"
            "\n–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ UI Windsurf –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wsmodel set [#N|@sub] <name>"
        )
        try:
            await message.answer(help_text, reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/model help send failed: {e}")
        return

    sub = parts[1].lower()

    if sub == "current":
        try:
            await message.answer(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ai_processor.get_model_name() or '‚Äî'}", reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/model current send failed: {e}")
        return

    if sub == "list":
        models = ai_processor.list_models()
        if len(parts) >= 3:
            filt = " ".join(parts[2:]).lower()
            models = [m for m in models if filt in m.lower()]
        if not models:
            try:
                await message.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=main_keyboard)
            except TelegramNetworkError as e:
                logger.warning(f"/model list empty send failed: {e}")
            return
        lines = ["üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"] + [f"‚Ä¢ {m}" for m in models[:100]]
        try:
            await message.answer("\n".join(lines), reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/model list send failed: {e}")
        return

    if sub == "set" and len(parts) >= 3:
        new_model = " ".join(parts[2:]).strip()
        ok, msg = ai_processor.set_model(new_model)
        prefix = "‚úÖ" if ok else "‚ùå"
        try:
            await message.answer(f"{prefix} {msg}", reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/model set send failed: {e}")
        return

    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –ø–æ–º–æ—â–∏.", reply_markup=main_keyboard)


def _parse_target_prefix(s: str) -> tuple[Optional[str], str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ñ–∏–∫—Å–∞ [#N] –∏–ª–∏ [@substr] –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (target, rest)."""
    import re
    s = (s or "").strip()
    m = re.match(r"^\[(#\d+|@[^\]]+)\]\s*(.*)$", s)
    if not m:
        return None, s
    token = m.group(1)
    rest = m.group(2).strip()
    if token.startswith('#') and token[1:].isdigit():
        return f"index:{int(token[1:])}", rest
    if token.startswith('@'):
        return token[1:], rest
    return None, s


@dp.message(Command(commands=["wsmodel"]))
async def cmd_wsmodel(message: types.Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ UI Windsurf —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É (Cmd+/, –≤–≤–µ—Å—Ç–∏ –∏–º—è, Enter).
    –ü—Ä–∏–º–µ—Ä—ã:
    /wsmodel set <name>
    /wsmodel set [#2] <name>
    /wsmodel set [@title_sub] <name>
    """
    text = (message.text or "").strip()
    parts = text.split(maxsplit=2)
    if len(parts) < 2:
        try:
            await message.answer(
                "‚öôÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ UI Windsurf:\n"
                "‚Ä¢ /wsmodel set <name> ‚Äî –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ\n"
                "‚Ä¢ /wsmodel set [#N] <name> ‚Äî –æ–∫–Ω–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ /windows\n"
                "‚Ä¢ /wsmodel set [@—á–∞—Å—Ç—å_–∑–∞–≥–æ–ª–æ–≤–∫–∞] <name> ‚Äî –æ–∫–Ω–æ –ø–æ —á–∞—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞\n"
                "–ü—Ä–∏–Ω—Ü–∏–ø: Cmd+/ ‚Üí –≤–≤–µ—Å—Ç–∏ <name> ‚Üí Enter",
                reply_markup=main_keyboard,
            )
        except TelegramNetworkError as e:
            logger.warning(f"/wsmodel help send failed: {e}")
        return
    sub = (parts[1] or "").lower()
    if sub != 'set':
        try:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wsmodel set ...", reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/wsmodel unknown send failed: {e}")
        return
    if len(parts) < 3:
        try:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥–µ–ª–∏: /wsmodel set <name>", reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/wsmodel no name send failed: {e}")
        return
    payload = parts[2]
    target, name = _parse_target_prefix(payload)
    if not name:
        await message.answer("–ü—É—Å—Ç–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏", reply_markup=main_keyboard)
        return
    ok, msg = desktop_controller.set_model_ui(name, target or "active")
    prefix = "‚úÖ" if ok else "‚ùå"
    await message.answer(f"{prefix} {msg}", reply_markup=main_keyboard)


@dp.message(Command(commands=["whoami"]))
async def cmd_whoami(message: types.Message):
    uid = message.from_user.id if message.from_user else None
    uname = message.from_user.username if message.from_user else None
    try:
        await message.answer(f"–í–∞—à user_id: {uid}\nusername: @{uname}", reply_markup=main_keyboard)
    except TelegramNetworkError as e:
        logger.warning(f"/whoami send failed: {e}")


@dp.message(Command(commands=["newchat"]))
async def cmd_newchat(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç –∫–ª–∏–∫–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (1192,51)."""
    try:
        ok, msg = desktop_controller.newchat_click()
        prefix = "‚úÖ" if ok else "‚ùå"
        await message.answer(f"{prefix} {msg}", reply_markup=main_keyboard)
    except TelegramNetworkError as e:
        logger.warning(f"/newchat send failed: {e}")


@dp.message(Command(commands=["change"]))
async def cmd_change(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ ~/VovkaNowEngineer/<name>.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change <name>
    """
    text = (message.text or "").strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        try:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏: /change <name>", reply_markup=main_keyboard)
        except TelegramNetworkError as e:
            logger.warning(f"/change help send failed: {e}")
        return
    folder = parts[1].strip()
    ok, msg = desktop_controller.change_project(folder)
    prefix = "‚úÖ" if ok else "‚ùå"
    try:
        await message.answer(f"{prefix} {msg}", reply_markup=main_keyboard)
    except TelegramNetworkError as e:
        logger.warning(f"/change send failed: {e}")


async def _get_git_root_for(chat_id: int | None, user_id: int | None) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
    1) –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Ç–∞: /git setroot <path>
    2) –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /git setroot_user <path>
    3) GIT_WORKDIR (–µ—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    4) git rev-parse --show-toplevel (cwd=os.getcwd())
    5) git rev-parse --show-toplevel (cwd=REPO_ROOT)
    6) os.getcwd() –∫–∞–∫ fallback
    """
    import shutil, os as _os
    # 1. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Ç—É
    if chat_id is not None:
        p = CHAT_GIT_ROOT_OVERRIDE.get(chat_id)
        if p and _os.path.isdir(p):
            return p
    # 2. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id is not None:
        p = GIT_ROOT_OVERRIDE.get(user_id)
        if p and _os.path.isdir(p):
            return p
    # 3. –Ø–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ env
    if GIT_WORKDIR and _os.path.isdir(GIT_WORKDIR):
        return GIT_WORKDIR
    # 4. –ü–æ–ø—ã—Ç–∫–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    try:
        proc = await _asyncio.create_subprocess_exec(
            "git", "rev-parse", "--show-toplevel",
            cwd=_os.getcwd(), stdout=_PIPE, stderr=_PIPE,
        )
        out, err = await proc.communicate()
        if proc.returncode == 0:
            p = (out or b"").decode("utf-8", "ignore").strip()
            if p and _os.path.isdir(p):
                return p
    except Exception:
        pass
    # 5. –ü–æ–ø—ã—Ç–∫–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞
    try:
        proc = await _asyncio.create_subprocess_exec(
            "git", "rev-parse", "--show-toplevel",
            cwd=REPO_ROOT, stdout=_PIPE, stderr=_PIPE,
        )
        out, err = await proc.communicate()
        if proc.returncode == 0:
            p = (out or b"").decode("utf-8", "ignore").strip()
            if p and _os.path.isdir(p):
                return p
    except Exception:
        pass
    # 6. Fallback
    return _os.getcwd()


async def _git_run(args: list[str], cwd: str) -> tuple[int, str, str]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å git-–∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å (code, stdout, stderr)."""
    try:
        proc = await _asyncio.create_subprocess_exec(
            *args,
            cwd=cwd,
            stdout=_PIPE,
            stderr=_PIPE,
        )
        out, err = await proc.communicate()
        return proc.returncode, (out or b"").decode("utf-8", "ignore"), (err or b"").decode("utf-8", "ignore")
    except Exception as e:
        return 1, "", f"exec error: {e}"


def _git_enabled_for(user_id: int) -> bool:
    return bool(GIT_ALLOWED_USER_IDS) and (user_id in GIT_ALLOWED_USER_IDS)


@dp.message(Command(commands=["git"]))
async def cmd_git(message: types.Message):
    try:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ /git –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.", reply_markup=main_keyboard)
    except TelegramNetworkError as e:
        logger.warning(f"/git send failed: {e}")


@dp.message()
async def handle_message(message: types.Message):
    user_input = message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith("/"):
        return

    # if not desktop_controller.is_calibrated():
    #     await message.answer(
    #         "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
    #     )
    #     return

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞—Ä–≥–µ—Ç–∞ –æ–∫–Ω–∞: [#N] –∏–ª–∏ [@title]
        target = None
        text = user_input
        if user_input.startswith("[#"):
            try:
                close = user_input.find("]")
                num = int(user_input[2:close])
                target = f"index:{num}"
                text = user_input[close + 1 :].strip()
            except Exception:
                pass
        elif user_input.startswith("[@"):
            try:
                close = user_input.find("]")
                title = user_input[2:close]
                target = title.strip()
                text = user_input[close + 1 :].strip()
            except Exception:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Windsurf
        try:
            await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Windsurf...")
        except TelegramNetworkError as e:
            logger.warning(f"pre-send notice failed: {e}")
        copied_response = None
        diag = None
        if target:
            success = await desktop_controller.send_message_to(target, text)
        else:
            success = await desktop_controller.send_message(text)
        # –ü–æ–ª—É—á–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
        diag = desktop_controller.get_diagnostics()
        # 1) –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞ ‚Äî —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        if not success:
            diag = desktop_controller.get_diagnostics()
            reason = diag.get("last_error") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diag.get('platform')}\n"
                    f"Windsurf –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(diag.get('windsurf_pids', []))}\n"
                    f"last_paste_strategy: {diag.get('last_paste_strategy')}\n"
                    f"last_copy_method: {diag.get('last_copy_method')}\n"
                    f"last_copy_length: {diag.get('last_copy_length')}\n"
                    f"last_copy_is_echo: {diag.get('last_copy_is_echo')}\n"
                    f"response_wait_loops: {diag.get('response_wait_loops')}\n"
                    f"response_ready_time: {diag.get('response_ready_time')}s\n"
                    f"response_stabilized: {diag.get('response_stabilized')}\n"
                    f"response_stabilized_by: {diag.get('response_stabilized_by')}\n"
                    f"last_ui_button: {diag.get('last_ui_button')}\n"
                    f"last_ui_avg_color: {diag.get('last_ui_avg_color')}\n"
                    f"last_visual_region: {diag.get('last_visual_region')}\n"
                    f"last_click_xy: {diag.get('last_click_xy')}",
                    reply_markup=main_keyboard,
                )
            except TelegramNetworkError as e:
                logger.warning(f"send error details failed: {e}")
            return

        # 2) –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –ø–æ –æ–ø–æ—Ä–Ω–æ–º—É –ø–∏–∫—Å–µ–ª—é ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            rp_required = (os.getenv("READY_PIXEL_REQUIRED", "0").lower() not in ("0", "false"))
        except Exception:
            rp_required = False
        if rp_required:
            by = (diag or {}).get("response_stabilized_by")
            last_rp = (diag or {}).get("last_ready_pixel") or {}
            if by != "ready_pixel" or not last_rp.get("match", False):
                try:
                    await message.answer(
                        "‚è≥ –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –µ—â—ë –Ω–µ —Å–æ–≤–ø–∞–ª–∞ (READY_PIXEL).",
                        reply_markup=main_keyboard,
                    )
                except TelegramNetworkError as e:
                    logger.warning(f"ready wait notify failed: {e}")
                return

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:
        # - –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∫–∞–∫ fallback, –¥–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—é response –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        # - –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ—Ä–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
        if copied_response is None:
            import pyperclip
            copied_response = pyperclip.paste()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç—Ö–æ: –µ—Å–ª–∏ diag –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ —ç—Ö–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        response_is_echo = False
        try:
            if isinstance(diag, dict) and (diag.get("response_is_echo") or diag.get("last_copy_is_echo")):
                response_is_echo = True
        except Exception:
            pass
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        prefix_note = ""
        try:
            if isinstance(diag, dict) and diag.get("last_copy_method") == "full":
                prefix_note = "(‚ÑπÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≤—ã—Å–ª–∞–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–∫–Ω–∞)\n\n"
        except Exception:
            pass

        if (copied_response and copied_response.strip()) and not response_is_echo:
            await answer_chunks(
                message,
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Windsurf:\n\n{prefix_note}{copied_response}",
                reply_markup=main_keyboard,
            )
        else:
            echo_note = "\n–ü—Ä–∏—á–∏–Ω–∞: –ø–æ–ª—É—á–µ–Ω–æ —ç—Ö–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –æ—Ç–≤–µ—Ç–∞ –µ—â–µ –Ω–µ—Ç." if response_is_echo else ""
            hint = (
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: —É–≤–µ–ª–∏—á–∏—Ç—å RESPONSE_WAIT_SECONDS, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –∏–ª–∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ Windsurf."
            )
            try:
                await message.answer(
                    f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞.{echo_note}\n{hint}",
                    reply_markup=main_keyboard,
                )
            except TelegramNetworkError as e:
                logger.warning(f"fallback notify failed: {e}")

        # OCR/–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    except Exception as e:
        logger.error(f"Error: {e}")
        try:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except TelegramNetworkError:
            pass


async def main():
    logger.info("Starting Windsurf Bot...")
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    bot = Bot(token=token)
    try:
        try:
            me = await bot.get_me()
            logger.info(f"Bot is up: @{getattr(me, 'username', None)} id={getattr(me, 'id', None)}")
        except Exception as e:
            logger.warning(f"get_me failed: {e}")
        await dp.start_polling(bot)
    except (KeyboardInterrupt, TelegramNetworkError) as e:
        logger.warning(f"Bot stopped: {e}")

if __name__ == "__main__":
    asyncio.run(main())
