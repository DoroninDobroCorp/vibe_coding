import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

from windsurf_controller import desktop_controller

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ taskkill /f /im python.exe; Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd 'z:\Dev\vibe\vibe_coding'; python bot.py"

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher(bot=bot)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = (
    {}
)  # –§–æ—Ä–º–∞—Ç: {user_id: {'last_full_response': str, 'last_updated': datetime}}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        # [
        #     KeyboardButton(text="/calibrate_input"),
        #     KeyboardButton(text="/calibrate_button"),
        # ],
        # [
        #     KeyboardButton(text="/calibrate_response"),
        #     KeyboardButton(text="/calibrate_confirm"),
        # ],
        [KeyboardButton(text="/status")],
        # [KeyboardButton(text="/full")],
    ],
    resize_keyboard=True,
)


@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Windsurf Desktop\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Windsurf!",
        reply_markup=main_keyboard,
    )



@dp.message(Command(commands=["status"]))
async def status(message: types.Message):
    diag = desktop_controller.get_diagnostics()
    status_lines = [
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:",
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diag.get('platform')}",
        f"Windsurf –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(diag.get('windsurf_pids', []))} ‚Äî {diag.get('windsurf_pids')}",
        f"Windows automation: {'‚úÖ' if diag.get('windows_automation') else '‚ùå'}",
        f"–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {diag.get('success_sends')}",
        f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {diag.get('failed_sends')}",
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {diag.get('last_error') or '‚Äî'}",
        "",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        f"RESPONSE_WAIT_SECONDS={diag.get('RESPONSE_WAIT_SECONDS')}",
        f"PASTE_RETRY_COUNT={diag.get('PASTE_RETRY_COUNT')}",
        f"COPY_RETRY_COUNT={diag.get('COPY_RETRY_COUNT')}",
    ]
    await message.answer("\n".join(status_lines), reply_markup=main_keyboard)


@dp.message()
async def handle_message(message: types.Message):
    user_input = message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith("/"):
        return

    # if not desktop_controller.is_calibrated():
    #     await message.answer(
    #         "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
    #     )
    #     return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Windsurf
        await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Windsurf...")
        success = await desktop_controller.send_message(user_input)

        if not success:
            diag = desktop_controller.get_diagnostics()
            reason = diag.get("last_error") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diag.get('platform')}\n"
                f"Windsurf –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(diag.get('windsurf_pids', []))}",
                reply_markup=main_keyboard,
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        import pyperclip
        copied_response = pyperclip.paste()
        
        if copied_response and copied_response.strip():
            await message.answer(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Windsurf:\n\n{copied_response}",
                reply_markup=main_keyboard,
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–∫–Ω–æ Windsurf –∞–∫—Ç–∏–≤–Ω–æ.",
                reply_markup=main_keyboard,
            )

        # OCR/–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def main():
    logger.info("Starting Windsurf Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
