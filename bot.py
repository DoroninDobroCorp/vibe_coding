import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

from ai_processor import ai_processor
from windsurf_controller import desktop_controller
from config import config

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ taskkill /f /im python.exe; Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd 'z:\Dev\vibe\vibe_coding'; python bot.py"

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher(bot=bot)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = (
    {}
)  # –§–æ—Ä–º–∞—Ç: {user_id: {'last_full_response': str, 'last_updated': datetime}}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        # [
        #     KeyboardButton(text="/calibrate_input"),
        #     KeyboardButton(text="/calibrate_button"),
        # ],
        # [
        #     KeyboardButton(text="/calibrate_response"),
        #     KeyboardButton(text="/calibrate_confirm"),
        # ],
        [KeyboardButton(text="/status")],
        # [KeyboardButton(text="/full")],
    ],
    resize_keyboard=True,
)


@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Windsurf Desktop\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        # "/calibrate_input - –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞\n"
        # "/calibrate_button - –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        # "/calibrate_response - –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞\n"
        # "/calibrate_confirm - –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        # "/status - –°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏\n"
        # "/full - –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Windsurf!",
        reply_markup=main_keyboard,
    )


# @dp.message(Command(commands=["calibrate_input"]))
# async def calibrate_input(message: types.Message):
#     success = desktop_controller.calibrate("input_box")
#     await message.answer("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞. –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å..")
#     await asyncio.sleep(5)
#     await message.answer(
#         "‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
#     )
#
#
# @dp.message(Command(commands=["calibrate_button"]))
# async def calibrate_button(message: types.Message):
#     success = desktop_controller.calibrate("send_button")
#     await message.answer("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞. –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å...")
#     await asyncio.sleep(5)
#     await message.answer(
#         "‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞" if success else "‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
#     )
#
#
# @dp.message(Command(commands=["calibrate_response"]))
# async def calibrate_response(message: types.Message):
#     success = desktop_controller.calibrate("response_area")
#     await message.answer("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ–ª—è –≤—ã–≤–æ–¥–∞. –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å...")
#     await asyncio.sleep(5)
#     await message.answer(
#         "‚úÖ –û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞" if success else "‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
#     )
#
#
# @dp.message(Command(commands=["calibrate_confirm"]))
# async def calibrate_confirm(message: types.Message):
#     success = desktop_controller.calibrate("confirm_button")
#     await message.answer(
#         "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å..."
#     )
#     await asyncio.sleep(5)
#     await message.answer(
#         "‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞" if success else "‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
#     )
#
#
# @dp.message(Command(commands=["status"]))
# async def status(message: types.Message):
#     status_text = "–°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:\n"
#     status_text += (
#         f"–ü–æ–ª–µ –≤–≤–æ–¥–∞: {'‚úÖ' if config.calibration_data['input_box'] else '‚ùå'}\n"
#     )
#     status_text += (
#         f"–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {'‚úÖ' if config.calibration_data['send_button'] else '‚ùå'}\n"
#     )
#     status_text += f"–û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {'‚úÖ' if config.calibration_data['response_area'] else '‚ùå'}\n"
#
#     if desktop_controller.is_calibrated():
#         status_text += "\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
#     else:
#         status_text += "\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
#
#     await message.answer(status_text)
#
#
# @dp.message(Command(commands=["full"]))
# async def get_full_response(message: types.Message):
#     # –ñ–¥–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
#     user_id = message.from_user.id
#     if user_id not in user_states:
#         user_states[user_id] = {
#             "last_full_response": None,
#             "last_updated": datetime.utcnow(),
#         }
#     else:
#         # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (1 —á–∞—Å)
#         if datetime.utcnow() - user_states[user_id]["last_updated"] > timedelta(
#             hours=1
#         ):
#             user_states[user_id]["last_full_response"] = None
#     full_response = user_states[user_id]["last_full_response"]
#
#     # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
#     if full_response:
#         for i in range(0, len(full_response), 4096):
#             await message.answer(full_response[i: i + 4096])
#     else:
#         await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")


@dp.message()
async def handle_message(message: types.Message):
    user_input = message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith("/"):
        return

    # if not desktop_controller.is_calibrated():
    #     await message.answer(
    #         "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
    #     )
    #     return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Windsurf
        await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Windsurf...")
        success = await desktop_controller.send_message(user_input)

        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        import pyperclip
        copied_response = pyperclip.paste()
        
        if copied_response and copied_response.strip():
            await message.answer(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Windsurf:\n\n{copied_response}",
                reply_markup=main_keyboard,
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")

        # # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # await message.answer("‚è≥ –û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞ –æ—Ç Windsurf...")
        # full_response = await desktop_controller.get_response(wait_time=15)
        # user_id = message.from_user.id
        # if user_id not in user_states:
        #     user_states[user_id] = {}
        # user_states[user_id]["last_full_response"] = full_response
        # user_states[user_id]["last_updated"] = datetime.utcnow()
        # try:
        #     summary = ai_processor.summarize(full_response)
        #     await message.answer(
        #         f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:\n\n{summary}\n\n"
        #         f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /full –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏",
        #         reply_markup=main_keyboard,
        #     )
        # except Exception as e:
        #     logger.error(f"Error: {e}")
        #     await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {full_response[:100]}")

    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def main():
    logger.info("Starting Windsurf Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
