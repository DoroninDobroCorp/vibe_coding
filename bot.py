import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from typing import Optional, List

from windsurf_controller import desktop_controller
from ai_processor import ai_processor
import aiohttp
import asyncio as _asyncio
from asyncio.subprocess import PIPE as _PIPE
import html

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ taskkill /f /im python.exe; Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd 'z:\Dev\vibe\vibe_coding'; python bot.py"

load_dotenv()


async def remote_list_windows(session: aiohttp.ClientSession) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω —Å —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    if not REMOTE_CONTROLLER_URL:
        return []
    async with session.get(f"{REMOTE_CONTROLLER_URL}/windows", timeout=10) as resp:
        data = await resp.json()
        return data.get("windows", [])


async def remote_send(session: aiohttp.ClientSession, message: str, target: Optional[str] = None) -> tuple[bool, Optional[str]]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–¥–∞–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, response_text)."""
    if not REMOTE_CONTROLLER_URL:
        return False, None
    payload = {"message": message}
    if target:
        payload["target"] = target
    async with session.post(f"{REMOTE_CONTROLLER_URL}/send", json=payload, timeout=20) as resp:
        data = await resp.json()
        return bool(data.get("ok")), data.get("response")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–µ–∑ –±–æ—Ç–∞; –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ main()
dp = Dispatcher()

# URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ
REMOTE_CONTROLLER_URL = (os.getenv("REMOTE_CONTROLLER_URL") or "").strip()
if REMOTE_CONTROLLER_URL.endswith("/"):
    REMOTE_CONTROLLER_URL = REMOTE_CONTROLLER_URL[:-1]

# Git —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö user_id (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
_ids_raw = os.getenv("GIT_ALLOWED_USER_IDS", "")
try:
    GIT_ALLOWED_USER_IDS = {int(x) for x in _ids_raw.replace(" ", "").split(",") if x.strip().isdigit()}
except Exception:
    GIT_ALLOWED_USER_IDS = set()

REPO_ROOT = os.path.dirname(os.path.abspath(__file__))

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = (
    {}
)  # –§–æ—Ä–º–∞—Ç: {user_id: {'last_full_response': str, 'last_updated': datetime}}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        # [
        #     KeyboardButton(text="/calibrate_input"),
        #     KeyboardButton(text="/calibrate_button"),
        # ],
        # [
        #     KeyboardButton(text="/calibrate_response"),
        #     KeyboardButton(text="/calibrate_confirm"),
        # ],
        [KeyboardButton(text="/status"), KeyboardButton(text="/windows")],
        # [KeyboardButton(text="/full")],
    ],
    resize_keyboard=True,
)


@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Windsurf Desktop\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
        "/model ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é Gemini (list/set/current)\n"
        "/git ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Git (status/commit/push) ‚Äî –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ user_id\n"
        "/whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram user_id\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Windsurf!",
        reply_markup=main_keyboard,
    )



@dp.message(Command(commands=["status"]))
async def status(message: types.Message):
    diag = desktop_controller.get_diagnostics()
    status_lines = [
        "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:",
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diag.get('platform')}",
        f"Windsurf –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(diag.get('windsurf_pids', []))} ‚Äî {diag.get('windsurf_pids')}",
        f"Windows automation: {'‚úÖ' if diag.get('windows_automation') else '‚ùå'}",
        f"–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {diag.get('success_sends')}",
        f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {diag.get('failed_sends')}",
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {diag.get('last_error') or '‚Äî'}",
        "",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        f"RESPONSE_WAIT_SECONDS={diag.get('RESPONSE_WAIT_SECONDS')}",
        f"PASTE_RETRY_COUNT={diag.get('PASTE_RETRY_COUNT')}",
        f"COPY_RETRY_COUNT={diag.get('COPY_RETRY_COUNT')}",
        "",
        "AI:",
        f"Gemini –º–æ–¥–µ–ª—å: {ai_processor.get_model_name() or '‚Äî'}",
        f"REMOTE_CONTROLLER_URL: {'–≤–∫–ª' if REMOTE_CONTROLLER_URL else '‚Äî'}",
    ]
    await message.answer("\n".join(status_lines), reply_markup=main_keyboard)


@dp.message(Command(commands=["windows"]))
async def windows(message: types.Message):
    if REMOTE_CONTROLLER_URL:
        try:
            async with aiohttp.ClientSession() as session:
                titles = await remote_list_windows(session)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")
            return
    else:
        titles = desktop_controller.list_windows()
    if not titles:
        await message.answer("–û–∫–æ–Ω Windsurf –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ.", reply_markup=main_keyboard)
        return
    lines = ["ü™ü –û–∫–Ω–∞ Windsurf:"]
    for i, t in enumerate(titles, start=1):
        lines.append(f"#{i}: {t}")
    lines.append("\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: [#N] –≤–∞—à —Ç–µ–∫—Å—Ç –∏–ª–∏ [@—á–∞—Å—Ç—å_–∑–∞–≥–æ–ª–æ–≤–∫–∞] –≤–∞—à —Ç–µ–∫—Å—Ç")
    await message.answer("\n".join(lines), reply_markup=main_keyboard)


@dp.message(Command(commands=["model"]))
async def cmd_model(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é Gemini —á–µ—Ä–µ–∑ Telegram
    –ü—Ä–∏–º–µ—Ä—ã:
    /model -> –ø–æ–º–æ—â—å
    /model current
    /model list [filter]
    /model set gemini-2.5-pro
    """
    text = (message.text or "").strip()
    parts = text.split()
    if len(parts) == 1:
        help_text = (
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é Gemini:\n"
            "‚Ä¢ /model current ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ /model list ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n"
            "‚Ä¢ /model list pro ‚Äî —Å–ø–∏—Å–æ–∫, —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ\n"
            "‚Ä¢ /model set <name> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å\n"
        )
        await message.answer(help_text, reply_markup=main_keyboard)
        return

    sub = parts[1].lower()

    if sub == "current":
        await message.answer(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ai_processor.get_model_name() or '‚Äî'}", reply_markup=main_keyboard)
        return

    if sub == "list":
        models = ai_processor.list_models()
        if len(parts) >= 3:
            filt = " ".join(parts[2:]).lower()
            models = [m for m in models if filt in m.lower()]
        if not models:
            await message.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=main_keyboard)
            return
        lines = ["üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"] + [f"‚Ä¢ {m}" for m in models[:100]]
        await message.answer("\n".join(lines), reply_markup=main_keyboard)
        return

    if sub == "set" and len(parts) >= 3:
        new_model = " ".join(parts[2:]).strip()
        ok, msg = ai_processor.set_model(new_model)
        prefix = "‚úÖ" if ok else "‚ùå"
        await message.answer(f"{prefix} {msg}", reply_markup=main_keyboard)
        return

    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model –¥–ª—è –ø–æ–º–æ—â–∏.", reply_markup=main_keyboard)


@dp.message(Command(commands=["whoami"]))
async def cmd_whoami(message: types.Message):
    uid = message.from_user.id if message.from_user else None
    uname = message.from_user.username if message.from_user else None
    await message.answer(f"–í–∞—à user_id: {uid}\nusername: @{uname}", reply_markup=main_keyboard)


async def _git_run(args: list[str]) -> tuple[int, str, str]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å git-–∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å (code, stdout, stderr)."""
    try:
        proc = await _asyncio.create_subprocess_exec(
            *args,
            cwd=REPO_ROOT,
            stdout=_PIPE,
            stderr=_PIPE,
        )
        out, err = await proc.communicate()
        return proc.returncode, (out or b"").decode("utf-8", "ignore"), (err or b"").decode("utf-8", "ignore")
    except Exception as e:
        return 1, "", f"exec error: {e}"


def _git_enabled_for(user_id: int) -> bool:
    return bool(GIT_ALLOWED_USER_IDS) and (user_id in GIT_ALLOWED_USER_IDS)


@dp.message(Command(commands=["git"]))
async def cmd_git(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Git —á–µ—Ä–µ–∑ Telegram.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–¥–∞—Ç—å env GIT_ALLOWED_USER_IDS=123,456

    –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã:
    /git -> –ø–æ–º–æ—â—å
    /git status
    /git commit <message>
    /git push [remote] [branch]
    """
    user_id = message.from_user.id if message.from_user else None
    if not user_id or not _git_enabled_for(user_id):
        await message.answer(
            "‚ùå Git-–∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –£–∫–∞–∂–∏—Ç–µ GIT_ALLOWED_USER_IDS –≤ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram user_id.",
            reply_markup=main_keyboard,
        )
        return

    text = (message.text or "").strip()
    parts = text.split()
    if len(parts) == 1:
        help_text = (
            "üõ† –ö–æ–º–∞–Ω–¥—ã Git:\n"
            "‚Ä¢ /git status ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞\n"
            "‚Ä¢ /git commit <message> ‚Äî git add -A && git commit -m <message>\n"
            "‚Ä¢ /git push [remote] [branch] ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é origin –∏ —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞\n"
        )
        await message.answer(help_text, reply_markup=main_keyboard)
        return

    sub = parts[1].lower()

    # /git status
    if sub == "status":
        code, out, err = await _git_run(["git", "status", "--porcelain=v1", "-b"])
        out = out.strip() or err.strip() or f"exit={code}"
        if len(out) > 3500:
            out = out[:3500] + "\n... (truncated)"
        await message.answer(f"<pre>{html.escape(out)}</pre>", parse_mode="HTML", reply_markup=main_keyboard)
        return

    # /git commit <message>
    if sub == "commit":
        if len(parts) < 3:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: /git commit <message>", reply_markup=main_keyboard)
            return
        commit_msg = text.split(" ", 2)[2].strip()
        await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é: git add -A; git commit...", reply_markup=main_keyboard)
        code1, out1, err1 = await _git_run(["git", "add", "-A"])
        code2, out2, err2 = await _git_run(["git", "commit", "-m", commit_msg])
        summary = (out1 + err1 + "\n" + out2 + err2).strip()
        if len(summary) > 3500:
            summary = summary[:3500] + "\n... (truncated)"
        status = "‚úÖ" if code2 == 0 else "‚ö†Ô∏è"
        content = summary or f"exit={code1},{code2}"
        await message.answer(f"{status} –†–µ–∑—É–ª—å—Ç–∞—Ç:\n<pre>{html.escape(content)}</pre>", parse_mode="HTML", reply_markup=main_keyboard)
        return

    # /git push [remote] [branch]
    if sub == "push":
        remote = parts[2] if len(parts) >= 3 else "origin"
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if len(parts) >= 4:
            branch = parts[3]
        else:
            _, outb, _ = await _git_run(["git", "rev-parse", "--abbrev-ref", "HEAD"])
            branch = (outb.strip() or "main").splitlines()[0]
        await message.answer(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é: git push {remote} {branch}...", reply_markup=main_keyboard)
        code, out, err = await _git_run(["git", "push", remote, branch])
        text_out = (out + err).strip()
        if len(text_out) > 3500:
            text_out = text_out[:3500] + "\n... (truncated)"
        status = "‚úÖ" if code == 0 else "‚ùå"
        content = text_out or f"exit={code}"
        await message.answer(f"{status} –†–µ–∑—É–ª—å—Ç–∞—Ç push:\n<pre>{html.escape(content)}</pre>", parse_mode="HTML", reply_markup=main_keyboard)
        return

    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /git –¥–ª—è –ø–æ–º–æ—â–∏.", reply_markup=main_keyboard)


@dp.message()
async def handle_message(message: types.Message):
    user_input = message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith("/"):
        return

    # if not desktop_controller.is_calibrated():
    #     await message.answer(
    #         "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"
    #     )
    #     return

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞—Ä–≥–µ—Ç–∞ –æ–∫–Ω–∞: [#N] –∏–ª–∏ [@title]
        target = None
        text = user_input
        if user_input.startswith("[#"):
            try:
                close = user_input.find("]")
                num = int(user_input[2:close])
                target = f"index:{num}"
                text = user_input[close + 1 :].strip()
            except Exception:
                pass
        elif user_input.startswith("[@"):
            try:
                close = user_input.find("]")
                title = user_input[2:close]
                target = title.strip()
                text = user_input[close + 1 :].strip()
            except Exception:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Windsurf
        await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Windsurf...")
        copied_response = None
        if REMOTE_CONTROLLER_URL:
            try:
                async with aiohttp.ClientSession() as session:
                    success, copied_response = await remote_send(session, text, target)
            except Exception as e:
                success = False
                copied_response = None
        else:
            if target:
                success = await desktop_controller.send_message_to(target, text)
            else:
                success = await desktop_controller.send_message(text)

        if not success:
            diag = desktop_controller.get_diagnostics()
            reason = diag.get("last_error") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diag.get('platform')}\n"
                f"Windsurf –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(diag.get('windsurf_pids', []))}",
                reply_markup=main_keyboard,
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if copied_response is None:
            import pyperclip
            copied_response = pyperclip.paste()
        
        if copied_response and copied_response.strip():
            await message.answer(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Windsurf:\n\n{copied_response}",
                reply_markup=main_keyboard,
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–∫–Ω–æ Windsurf –∞–∫—Ç–∏–≤–Ω–æ.",
                reply_markup=main_keyboard,
            )

        # OCR/–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def main():
    logger.info("Starting Windsurf Bot...")
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    bot = Bot(token=token)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
